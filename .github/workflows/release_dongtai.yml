name: Release DongTai-Server

on:
  release:
    types: [ created, edited ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    strategy:
      max-parallel: 4
      matrix:
        python-version: [3.7]

    steps:
      - name: start-build
        uses: joelwmale/webhook-action@master
        with:
          url: ${{ secrets.DONGTAI_WEBHOOK_URL }}
          body: '{"msg_type": "interactive","card": {"config": {"wide_screen_mode": true,"enable_forward": true},"elements": [{"tag": "div","text": {"content": "状态：项目${{github.repository}}构建开始\n分支：${{github.ref}}\n流程：${{github.workflow}}\n构建编号：${{github.run_number}}\n触发事件：${{github.event_name}}\n提交人：${{github.actor}}\nSHA-1：${{github.sha}}\n","tag": "lark_md"}}]}}'

      - name: Checkout
        uses: actions/checkout@v2

      - id: release
        run: |
          TAG_NAME=${{ github.event.release.tag_name }}
          ID=`echo ${TAG_NAME##v}`
          echo "::set-output name=VERSION::$ID"

      - name: Generate version file
        run: |
          bash .github/workflows/version_update.sh "${{ steps.release.outputs.VERSION }}"

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DONGTAI_DOCKERHUB_USERNAME }}
          password: ${{ secrets.DONGTAI_DOCKERHUB_TOKEN }}

      - name: Login to Aliyun Registry
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_DOCKERHUB_USER }}
          password: ${{ secrets.ALIYUN_DOCKERHUB_PASSWORD }}
          
      - name: Setup Ossutil
        uses: manyuanrong/setup-ossutil@v2.0
        with:
          # 填写Bucket所在地域的域名信息，可参考访问域名和数据中心。
          endpoint: ${{ secrets.ALIYUN_OSS_ENDPOINT }}
          # AccessKeyID
          access-key-id: ${{ secrets.ALIYUN_OSS_KEY_ID }}
          # AccessKeySceret
          access-key-secret: ${{ secrets.ALIYUN_OSS_KEY_SECRET }}
      - run: |
          ossutil cp oss://dongtai/agent/java/${{ steps.release.outputs.VERSION }}/ ./ --include "*.jar" -r
          [ ! -f ./dongtai-agent.jar ] && echo "$FILE does not exist."
          [ ! -f ./dongtai-agent.jar ] && ossutil cp oss://dongtai/agent/java/latest/ ./ --include "*.jar" -r
          [ ! -f ./dongtai-agent.jar ] && echo "$FILE does not exist."
          ossutil cp oss://dongtai/agent/python/ ./  --include "*.tar.gz" -r
          ossutil cp oss://dongtai/agent/php/ ./  --include "*.tar.gz" -r
          #ossutil cp oss://huoqi-public/iast/release-version/DongTai-agent-python/${{ steps.release.outputs.VERSION }}/version.txt DongTai-agent-python.version.txt || true
          #ossutil cp oss://huoqi-public/iast/release-version/DongTai-agent-java/${{ steps.release.outputs.VERSION }}/version.txt DongTai-agent-java.version.txt || true
          #ossutil cp oss://huoqi-public/iast/release-version/DongTai-agent-php/${{ steps.release.outputs.VERSION }}/version.txt DongTai-agent-php.version.txt || true
          #DONGTAI_JAVA_AGENT_REPONAME=`cat DongTai-agent-java.version.txt | awk '{split($0,a,",");print a[1]}' | sed -n "1p"`
          #DONGTAI_JAVA_AGENT_VERSION=`cat DongTai-agent-java.version.txt | awk '{split($0,a,",");print a[3]}' | sed -n "1p"`
          #DONGTAI_JAVA_AGENT_HASH=`cat DongTai-agent-java.version.txt | awk '{split($0,a,",");print a[3]}' | sed -n "2p"`
          #DONGTAI_PYTHON_AGENT_REPONAME=`cat DongTai-agent-python.version.txt | awk '{split($0,a,",");print a[1]}' | sed -n "1p"`
          #DONGTAI_PYTHON_AGENT_VERSION=`cat DongTai-agent-python.version.txt | awk '{split($0,a,",");print a[3]}' | sed -n "1p"`
          #DONGTAI_PYTHON_AGENT_HASH=`cat DongTai-agent-python.version.txt | awk '{split($0,a,",");print a[3]}' | sed -n "2p"`
          echo "REPLACE INTO project_version_control (version, component_name, component_version_hash) VALUES('${{ steps.release.outputs.version }}', '${{ github.event.repository.name }}', '${GITHUB_SHA}');" >> ./deploy/docker/version.sql
          #echo "REPLACE INTO project_version_control (version, component_name, component_version_hash) VALUES('$DONGTAI_JAVA_AGENT_VERSION', '$DONGTAI_JAVA_AGENT_REPONAME', '$DONGTAI_JAVA_AGENT_HASH');" >> ./deploy/docker/version.sql
          #echo "REPLACE INTO project_version_control (version, component_name, component_version_hash) VALUES('$DONGTAI_PYTHON_AGENT_VERSION', '$DONGTAI_PYTHON_AGENT_REPONAME', '$DONGTAI_PYTHON_AGENT_HASH');" >> ./deploy/docker/version.sql

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile
          context: .
          push: true
          tags: | 
            registry.cn-beijing.aliyuncs.com/huoxian_pub/dongtai-server:latest
            registry.cn-beijing.aliyuncs.com/huoxian_pub/dongtai-server:${{ steps.release.outputs.version }}
            dongtai/dongtai-server:latest
            dongtai/dongtai-server:${{ steps.release.outputs.version }}
      #- uses: actions/checkout@master
      #- name: deploy to cluster
      #  uses: wahyd4/kubectl-helm-action@master
      #  env:
      #    KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      #  with:
      #    args: |
      #      find .github/deploy/deploy-dongtai-server-prod.yml -type f -exec sed -i 's/VERSION/${{ steps.release.outputs.version }}/g' {} \;
      #      ls .github/deploy/deploy-dongtai-server-prod.yml | xargs -I {} kubectl apply -f {}

      - name: finish build
        uses: joelwmale/webhook-action@master
        with:
          url: ${{ secrets.DONGTAI_WEBHOOK_URL }}
          body: '{"msg_type": "interactive","card": {"config": {"wide_screen_mode": true,"enable_forward": true},"elements": [{"tag": "div","text": {"content": "状态：项目${{github.repository}}构建成功\n分支：${{github.ref}}\n流程：${{github.workflow}}\n构建编号：${{github.run_number}}\n触发事件：${{github.event_name}}\n提交人：${{github.actor}}\nSHA-1：${{github.sha}}\n","tag": "lark_md"}}]}}'
