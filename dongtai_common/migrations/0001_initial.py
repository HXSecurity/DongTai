# Generated by Django 3.2.20 on 2023-07-25 12:01

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import shortuuid.django_fields
from django.conf import settings
from django.db import migrations, models

import dongtai_common.models.agent
import dongtai_common.models.user
import dongtai_common.utils.db


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("is_superuser", models.IntegerField(default=0)),
                ("phone", models.CharField(blank=True, max_length=15)),
                ("default_language", models.CharField(blank=True, max_length=15)),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "db_table": "auth_user",
                "abstract": False,
            },
            managers=[
                ("objects", dongtai_common.models.user.SaaSUserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Asset",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("package_name", models.CharField(blank=True, max_length=255)),
                ("package_path", models.CharField(blank=True, max_length=255)),
                ("signature_algorithm", models.CharField(blank=True, max_length=255)),
                ("signature_value", models.CharField(blank=True, max_length=255)),
                ("dt", models.IntegerField()),
                ("version", models.CharField(blank=True, max_length=255)),
                ("safe_version", models.CharField(blank=True, max_length=255)),
                ("last_version", models.CharField(blank=True, max_length=255)),
                ("vul_count", models.IntegerField()),
                ("vul_critical_count", models.IntegerField(default=0)),
                ("vul_high_count", models.IntegerField(default=0)),
                ("vul_medium_count", models.IntegerField(default=0)),
                ("vul_low_count", models.IntegerField(default=0)),
                ("vul_info_count", models.IntegerField(default=0)),
                ("project_name", models.CharField(blank=True, max_length=255)),
                ("language", models.CharField(blank=True, max_length=32)),
                ("license", models.CharField(blank=True, max_length=64)),
                ("dependency_level", models.IntegerField(default=0)),
                ("parent_dependency_id", models.IntegerField(default=0)),
                ("is_del", models.SmallIntegerField(default=0)),
                ("safe_version_list", models.JSONField(default=list)),
                ("nearest_safe_version", models.JSONField(default=str)),
                ("latest_safe_version", models.JSONField(default=str)),
                ("license_list", models.JSONField(default=list)),
                ("highest_license", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "iast_asset",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="AssetV2Global",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("package_name", models.CharField(blank=True, max_length=255)),
                ("signature_algorithm", models.CharField(blank=True, max_length=255)),
                ("signature_value", models.CharField(blank=True, max_length=255)),
                ("version", models.CharField(blank=True, max_length=255)),
                (
                    "level",
                    models.IntegerField(
                        blank=True,
                        choices=[(4, "严重"), (3, "高危"), (2, "中危"), (1, "低危"), (0, "无风险")],
                        db_column="level_id",
                        default=0,
                    ),
                ),
                ("vul_count", models.IntegerField(blank=True, default=0)),
                ("vul_critical_count", models.IntegerField(blank=True, default=0)),
                ("vul_high_count", models.IntegerField(blank=True, default=0)),
                ("vul_medium_count", models.IntegerField(blank=True, default=0)),
                ("vul_low_count", models.IntegerField(blank=True, default=0)),
                ("vul_info_count", models.IntegerField(blank=True, default=0)),
                ("license_list", models.JSONField(blank=True, default=list)),
                ("language_id", models.IntegerField(blank=True, default=1)),
                ("aql", models.CharField(blank=True, max_length=255, unique=True)),
            ],
            options={
                "db_table": "iast_asset_v2_global",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Department",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        error_messages={"unique": "A department with that department name already exists."},
                        max_length=100,
                        unique=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "create_time",
                    models.IntegerField(
                        blank=True, default=dongtai_common.utils.db.get_timestamp, verbose_name="create time"
                    ),
                ),
                (
                    "update_time",
                    models.IntegerField(
                        blank=True, default=dongtai_common.utils.db.get_timestamp, verbose_name="update time"
                    ),
                ),
                ("created_by", models.IntegerField(blank=True, verbose_name="created by")),
                ("parent_id", models.IntegerField(blank=True, verbose_name="parent id")),
                ("principal_id", models.IntegerField(blank=True, default=0)),
                ("department_path", models.CharField(blank=True, max_length=1024)),
                ("token", models.CharField(blank=True, max_length=1024)),
            ],
            options={
                "db_table": "auth_department",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="HookStrategy",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.CharField(blank=True, max_length=255)),
                ("source", models.CharField(blank=True, max_length=255)),
                ("target", models.CharField(blank=True, max_length=255)),
                ("inherit", models.CharField(blank=True, max_length=255)),
                ("track", models.CharField(blank=True, max_length=5)),
                ("create_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                ("update_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                ("created_by", models.IntegerField()),
                ("enable", models.IntegerField(default=1)),
                ("type", models.IntegerField()),
                ("system_type", models.IntegerField(blank=True, default=0)),
                ("ignore_blacklist", models.BooleanField(default=False)),
                ("ignore_internal", models.BooleanField(default=False)),
                ("tags", models.JSONField(default=list)),
                ("untags", models.JSONField(default=list)),
                ("stack_blacklist", models.JSONField(default=list)),
                ("command", models.CharField(blank=True, max_length=128)),
            ],
            options={
                "db_table": "iast_hook_strategy",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="HookType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("type", models.IntegerField()),
                ("name", models.CharField(blank=True, max_length=255)),
                ("name_en", models.CharField(blank=True, max_length=255, null=True)),
                ("name_zh", models.CharField(blank=True, max_length=255, null=True)),
                ("value", models.CharField(blank=True, max_length=255)),
                ("enable", models.IntegerField(blank=True)),
                (
                    "create_time",
                    models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp, null=True),
                ),
                (
                    "update_time",
                    models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp, null=True),
                ),
                ("created_by", models.IntegerField(blank=True)),
                ("system_type", models.IntegerField(blank=True, default=0)),
            ],
            options={
                "db_table": "iast_hook_type",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="HttpMethod",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("method", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "iast_http_method",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAgent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("token", models.CharField(blank=True, max_length=255)),
                ("version", models.CharField(blank=True, max_length=255)),
                ("latest_time", models.IntegerField()),
                ("is_audit", models.IntegerField()),
                ("is_running", models.IntegerField()),
                ("is_core_running", models.IntegerField()),
                ("control", models.IntegerField()),
                ("is_control", models.IntegerField()),
                ("project_name", models.CharField(blank=True, max_length=255)),
                ("online", models.PositiveSmallIntegerField(default=0)),
                ("language", models.CharField(blank=True, max_length=10)),
                ("filepathsimhash", models.CharField(blank=True, max_length=255)),
                ("servicetype", models.CharField(blank=True, max_length=255)),
                ("alias", models.CharField(blank=True, max_length=255)),
                ("startup_time", models.IntegerField(default=0)),
                ("register_time", models.IntegerField(default=0)),
                ("actual_running_status", models.IntegerField(default=1)),
                ("except_running_status", models.IntegerField(default=1)),
                ("state_status", models.IntegerField(default=1)),
                ("events", models.JSONField(default=dongtai_common.models.agent.get_events)),
                ("allow_report", models.IntegerField(default=1)),
            ],
            options={
                "db_table": "iast_agent",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastApiMethod",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("method", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "iast_api_methods",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAssetVul",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("vul_name", models.CharField(blank=True, max_length=255)),
                ("vul_detail", models.TextField()),
                ("license", models.CharField(blank=True, max_length=50, null=True)),
                ("license_level", models.SmallIntegerField(blank=True, null=True)),
                ("aql", models.CharField(blank=True, max_length=100)),
                ("package_name", models.CharField(blank=True, max_length=100)),
                ("package_hash", models.CharField(blank=True, max_length=100, null=True)),
                ("package_version", models.CharField(blank=True, max_length=50)),
                ("package_safe_version", models.CharField(blank=True, max_length=50, null=True)),
                ("package_latest_version", models.CharField(blank=True, max_length=50, null=True)),
                ("package_language", models.CharField(blank=True, max_length=10)),
                ("vul_cve_nums", models.JSONField()),
                ("vul_serial", models.CharField(blank=True, max_length=100)),
                ("have_article", models.SmallIntegerField()),
                ("have_poc", models.SmallIntegerField()),
                ("cve_code", models.CharField(blank=True, max_length=64, null=True)),
                ("sid", models.CharField(blank=True, max_length=64, null=True)),
                ("cve_id", models.IntegerField(blank=True, null=True)),
                ("vul_publish_time", models.DateTimeField(blank=True, null=True)),
                ("vul_update_time", models.DateTimeField(blank=True, null=True)),
                ("update_time", models.IntegerField()),
                ("update_time_desc", models.IntegerField()),
                ("create_time", models.IntegerField()),
                ("fix_plan", models.JSONField(blank=True, default=dict, null=True)),
                ("poc", models.JSONField(blank=True, default=dict, null=True)),
                ("descriptions", models.JSONField(blank=True, default=dict, null=True)),
                ("references", models.JSONField(blank=True, default=dict, null=True)),
            ],
            options={
                "db_table": "iast_asset_vul",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAssetVulRelationMetaData",
            fields=[
                ("vul_asset_key", models.CharField(max_length=256, primary_key=True, serialize=False)),
                ("vul_dependency_path", models.JSONField(default=list)),
                ("effected_version_list", models.JSONField(default=list)),
                ("fixed_version_list", models.JSONField(default=list)),
                ("nearest_fixed_version", models.JSONField(default=dict)),
            ],
            options={
                "db_table": "iast_asset_vul_relation_metadata",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAssetVulType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("cwe_id", models.CharField(blank=True, max_length=20)),
                ("name", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "iast_asset_vul_type",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAssetVulV2",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("vul_name", models.CharField(blank=True, max_length=255)),
                ("vul_detail", models.TextField()),
                (
                    "level",
                    models.IntegerField(
                        blank=True,
                        choices=[(4, "严重"), (3, "高危"), (2, "中危"), (1, "低危"), (0, "无风险")],
                        db_column="level_id",
                        default=1,
                    ),
                ),
                ("update_time", models.IntegerField()),
                ("create_time", models.IntegerField()),
                ("references", models.JSONField(default=list)),
                ("change_time", models.IntegerField()),
                ("published_time", models.IntegerField()),
                ("vul_id", models.CharField(blank=True, max_length=255, unique=True)),
                ("vul_type", models.JSONField()),
                ("vul_codes", models.JSONField()),
                ("affected_versions", models.JSONField()),
                ("unaffected_versions", models.JSONField()),
            ],
            options={
                "db_table": "iast_asset_vul_v2",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastCircuitConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=200)),
                ("metric_types", models.CharField(blank=True, max_length=2000)),
                ("target_types", models.CharField(blank=True, db_column="targets", max_length=2000)),
                ("system_type", models.IntegerField(blank=True, null=True)),
                ("is_enable", models.IntegerField()),
                ("is_deleted", models.IntegerField(default=0)),
                ("deal", models.IntegerField()),
                ("interval", models.IntegerField(default=30)),
                ("metric_group", models.IntegerField()),
                ("priority", models.IntegerField()),
                ("create_time", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                ("update_time", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_circuit_configs",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastDastIntegration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("vul_name", models.CharField(blank=True, max_length=255)),
                ("detail", models.TextField(blank=True)),
                ("payload", models.CharField(blank=True, max_length=255)),
                ("target", models.CharField(blank=True, max_length=255)),
                ("vul_type", models.CharField(blank=True, max_length=255)),
                ("dast_tag", models.CharField(blank=True, max_length=255)),
                ("request_messages", models.JSONField(default=list)),
                ("urls", models.JSONField(default=list)),
                ("create_time", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                ("latest_time", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                ("dongtai_vul_type", models.JSONField(default=list)),
            ],
            options={
                "db_table": "iast_dast_integration",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastDepartment",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "iast_department",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastDeployDesc",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("desc", models.TextField()),
                ("desc_en", models.TextField(null=True)),
                ("desc_zh", models.TextField(null=True)),
                ("middleware", models.CharField(blank=True, max_length=255)),
                ("language", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "iast_deploy",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastDocument",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(blank=True, max_length=100)),
                ("title_en", models.CharField(blank=True, max_length=100, null=True)),
                ("title_zh", models.CharField(blank=True, max_length=100, null=True)),
                ("url", models.CharField(blank=True, max_length=2000)),
                ("url_en", models.CharField(blank=True, max_length=2000, null=True)),
                ("url_zh", models.CharField(blank=True, max_length=2000, null=True)),
                ("language", models.CharField(blank=True, max_length=100)),
                ("weight", models.IntegerField(default=0)),
            ],
            options={
                "db_table": "iast_document",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastEngineHeartbeat",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("client_ip", models.CharField(blank=True, max_length=255, null=True)),
                ("status", models.CharField(blank=True, max_length=255, null=True)),
                ("msg", models.CharField(blank=True, max_length=255, null=True)),
                ("agentcount", models.IntegerField(blank=True, db_column="agentCount", null=True)),
                ("reqcount", models.BigIntegerField(blank=True, db_column="reqCount", null=True)),
                ("agentenablecount", models.IntegerField(blank=True, db_column="agentEnableCount", null=True)),
                ("projectcount", models.IntegerField(blank=True, db_column="projectCount", null=True)),
                ("usercount", models.IntegerField(blank=True, db_column="userCount", null=True)),
                ("vulcount", models.IntegerField(blank=True, db_column="vulCount", null=True)),
                ("methodpoolcount", models.IntegerField(blank=True, db_column="methodPoolCount", null=True)),
                ("timestamp", models.IntegerField(blank=True, null=True)),
            ],
            options={
                "db_table": "iast_engine_heartbeat",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastEnginMonitoringIndicators",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(blank=True, max_length=100, unique=True)),
                ("name", models.CharField(blank=True, max_length=100)),
                ("name_en", models.CharField(blank=True, max_length=100, null=True)),
                ("name_zh", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "engine_monitoring_indicators",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastHeaderVulnerability",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("url", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "iast_header_vulnerability",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastMessageType",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=100)),
            ],
            options={
                "db_table": "iast_message_type",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastOverpowerUserAuth",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("server_name", models.CharField(blank=True, max_length=255, null=True)),
                ("server_port", models.CharField(blank=True, max_length=5, null=True)),
                ("app_name", models.CharField(blank=True, max_length=50, null=True)),
                ("http_url", models.CharField(blank=True, max_length=255, null=True)),
                ("http_query_string", models.CharField(blank=True, max_length=2000, null=True)),
                ("auth_sql", models.CharField(blank=True, max_length=255, null=True)),
                ("auth_value", models.CharField(blank=True, max_length=1000, null=True)),
                ("jdbc_class", models.CharField(blank=True, max_length=255, null=True)),
                ("created_time", models.DateTimeField(blank=True, null=True)),
                ("updated_time", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "iast_user_auth",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastPackageGAInfo",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("package_fullname", models.CharField(blank=True, max_length=255, unique=True)),
                ("affected_versions", models.JSONField(blank=True, default=list)),
                ("unaffected_versions", models.JSONField(blank=True, default=list)),
            ],
            options={
                "db_table": "iast_asset_v2_ga_info",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastPatternType",
            fields=[
                ("name", models.CharField(blank=True, max_length=255)),
                ("id", models.IntegerField(db_column="value", default=0)),
                ("logi_id", models.BigAutoField(db_column="id", primary_key=True, serialize=False)),
            ],
            options={
                "db_table": "iast_pattern_type",
            },
        ),
        migrations.CreateModel(
            name="IastProfile",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=100)),
                ("value", models.CharField(max_length=100)),
            ],
            options={
                "db_table": "iast_profile",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastProgramLanguage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255)),
            ],
            options={
                "db_table": "iast_program_language",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastProject",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=255)),
                ("mode", models.CharField(blank=True, default="插桩模式", max_length=255)),
                ("vul_count", models.PositiveIntegerField(blank=True, null=True)),
                ("agent_count", models.IntegerField(blank=True, null=True)),
                ("latest_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                (
                    "vul_validation",
                    models.IntegerField(
                        choices=[(None, 0), (0, "Follow Global"), (1, "Enable"), (2, "Disable")], default=0
                    ),
                ),
                ("base_url", models.CharField(blank=True, max_length=255)),
                ("test_req_header_key", models.CharField(blank=True, max_length=511)),
                ("test_req_header_value", models.CharField(blank=True, max_length=511)),
                ("data_gather", models.JSONField(null=True)),
                ("data_gather_is_followglobal", models.IntegerField(default=1)),
                ("blacklist_is_followglobal", models.IntegerField(default=1)),
                ("enable_log", models.BooleanField(null=True)),
                ("log_level", models.CharField(blank=True, max_length=511, null=True)),
                ("last_has_online_agent_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                ("status", models.IntegerField(choices=[(None, 0), (0, "正常"), (1, "错误"), (2, "离线")], default=0)),
                (
                    "department",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.department"),
                ),
            ],
            options={
                "db_table": "iast_project",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastProjectVersion",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("version_name", models.CharField(blank=True, max_length=255)),
                ("description", models.TextField(blank=True)),
                ("current_version", models.PositiveSmallIntegerField(default=0)),
                ("status", models.PositiveSmallIntegerField()),
                (
                    "create_time",
                    models.IntegerField(default=dongtai_common.utils.db.get_timestamp, verbose_name="create time"),
                ),
                (
                    "update_time",
                    models.IntegerField(default=dongtai_common.utils.db.get_timestamp, verbose_name="update time"),
                ),
                (
                    "project",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastproject"),
                ),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_project_version",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastServer",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("hostname", models.CharField(blank=True, max_length=255)),
                ("ip", models.CharField(blank=True, max_length=255)),
                ("port", models.IntegerField()),
                ("environment", models.TextField(blank=True, null=True)),
                ("path", models.CharField(blank=True, max_length=255)),
                ("status", models.CharField(blank=True, max_length=255)),
                ("container", models.CharField(blank=True, max_length=255)),
                ("container_path", models.CharField(blank=True, max_length=255)),
                ("cluster_name", models.CharField(blank=True, max_length=255)),
                ("cluster_version", models.CharField(blank=True, max_length=100)),
                ("command", models.TextField(blank=True)),
                ("env", models.CharField(blank=True, max_length=255)),
                ("runtime", models.CharField(blank=True, max_length=255)),
                ("create_time", models.IntegerField()),
                ("update_time", models.IntegerField()),
                ("network", models.CharField(blank=True, max_length=255)),
                ("protocol", models.CharField(blank=True, max_length=255)),
                ("pid", models.IntegerField(blank=True)),
                ("ipaddresslist", models.JSONField(default=list)),
            ],
            options={
                "db_table": "iast_server",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastStrategyModel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("vul_type", models.CharField(blank=True, max_length=255)),
                ("state", models.CharField(blank=True, max_length=255)),
                ("dt", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                ("vul_name", models.CharField(blank=True, max_length=255)),
                ("vul_name_en", models.CharField(blank=True, max_length=255, null=True)),
                ("vul_name_zh", models.CharField(blank=True, max_length=255, null=True)),
                ("vul_desc", models.TextField()),
                ("vul_desc_en", models.TextField(null=True)),
                ("vul_desc_zh", models.TextField(null=True)),
                ("vul_fix", models.TextField(blank=True)),
                ("vul_fix_en", models.TextField(blank=True, null=True)),
                ("vul_fix_zh", models.TextField(blank=True, null=True)),
                ("system_type", models.IntegerField(blank=True, default=0)),
                (
                    "hook_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.hooktype",
                    ),
                ),
            ],
            options={
                "db_table": "iast_strategy",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastVulLevel",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255)),
                ("name_value", models.CharField(blank=True, max_length=255)),
                ("name_value_en", models.CharField(blank=True, max_length=255, null=True)),
                ("name_value_zh", models.CharField(blank=True, max_length=255, null=True)),
                ("name_type", models.CharField(blank=True, max_length=255)),
                ("name_type_en", models.CharField(blank=True, max_length=255, null=True)),
                ("name_type_zh", models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                "db_table": "iast_vul_level",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastVulnerabilityStatus",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=100)),
                ("name_en", models.CharField(blank=True, max_length=100, null=True)),
                ("name_zh", models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                "db_table": "iast_vulnerability_status",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Talent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "talent_name",
                    models.CharField(
                        blank=True,
                        error_messages={"unique": "A talent with that talent name already exists."},
                        max_length=255,
                        unique=True,
                        verbose_name="talent",
                    ),
                ),
                ("create_time", models.IntegerField()),
                ("update_time", models.IntegerField()),
                ("created_by", models.IntegerField()),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
            ],
            options={
                "verbose_name": "talent",
                "db_table": "auth_talent",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="VersionControl",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("version", models.CharField(blank=True, max_length=255, null=True)),
                ("component_name", models.CharField(blank=True, max_length=255, null=True)),
                ("component_version_hash", models.CharField(blank=True, max_length=255, null=True)),
                ("additional", models.CharField(blank=True, max_length=255, null=True)),
                ("update_time", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
            ],
            options={
                "db_table": "project_version_control",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="ProjectSaasMethodPoolHeader",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(blank=True, max_length=255)),
                ("header_type", models.IntegerField(choices=[(1, "Request"), (2, "Response")], default=0)),
                (
                    "agent",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
            ],
            options={
                "db_table": "iast_project_header",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="MethodPool",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("url", models.CharField(blank=True, max_length=2000)),
                ("uri", models.CharField(blank=True, max_length=2000)),
                ("http_method", models.CharField(blank=True, max_length=10)),
                ("http_scheme", models.CharField(blank=True, max_length=20)),
                ("http_protocol", models.CharField(blank=True, max_length=255)),
                ("req_header", models.CharField(blank=True, max_length=2000, null=True)),
                ("req_params", models.CharField(blank=True, max_length=2000, null=True)),
                ("req_data", models.CharField(blank=True, max_length=4000, null=True)),
                ("res_header", models.CharField(blank=True, max_length=1000, null=True)),
                ("res_body", models.TextField(blank=True, null=True)),
                ("req_header_fs", models.TextField(db_column="req_header_for_search")),
                ("context_path", models.CharField(blank=True, max_length=255, null=True)),
                ("method_pool", models.TextField()),
                ("pool_sign", models.CharField(blank=True, max_length=40, unique=True)),
                ("clent_ip", models.CharField(blank=True, max_length=255)),
                ("create_time", models.IntegerField()),
                ("update_time", models.IntegerField()),
                ("uri_sha1", models.CharField(blank=True, db_index=True, max_length=40)),
                (
                    "agent",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
                (
                    "sinks",
                    models.ManyToManyField(
                        blank=True,
                        related_name="method_pools",
                        related_query_name="method_pool",
                        to="dongtai_common.HookStrategy",
                        verbose_name="sinks",
                    ),
                ),
            ],
            options={
                "db_table": "iast_agent_method_pool",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastVulRecheckPayload",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("value", models.CharField(blank=True, default=None, max_length=255)),
                ("status", models.IntegerField(blank=True, default=None)),
                (
                    "create_time",
                    models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp, null=True),
                ),
                ("language_id", models.IntegerField(blank=True, default=0)),
                (
                    "strategy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iaststrategymodel",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "iast_vul_recheck_payload",
            },
        ),
        migrations.CreateModel(
            name="IastVulnerabilityModel",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("search_keywords", models.CharField(blank=True, max_length=1000)),
                ("url", models.CharField(blank=True, max_length=2000)),
                ("uri", models.CharField(blank=True, max_length=255)),
                ("pattern_uri", models.CharField(blank=True, max_length=255, null=True)),
                ("vul_title", models.CharField(blank=True, default="", max_length=255)),
                ("http_method", models.CharField(blank=True, max_length=10)),
                ("http_scheme", models.CharField(blank=True, max_length=255)),
                ("http_protocol", models.CharField(blank=True, max_length=255)),
                ("req_header", models.TextField(blank=True)),
                ("req_params", models.CharField(blank=True, default="", max_length=2000)),
                ("req_data", models.TextField(blank=True)),
                ("res_header", models.TextField(blank=True)),
                ("res_body", models.TextField(blank=True)),
                ("full_stack", models.TextField(blank=True, null=True)),
                ("top_stack", models.CharField(blank=True, max_length=255, null=True)),
                ("bottom_stack", models.CharField(blank=True, max_length=255, null=True)),
                ("taint_value", models.CharField(blank=True, max_length=255, null=True)),
                ("taint_position", models.CharField(blank=True, max_length=255, null=True)),
                ("language", models.CharField(blank=True, max_length=10, null=True)),
                ("context_path", models.CharField(blank=True, max_length=255)),
                ("counts", models.IntegerField(blank=True)),
                ("first_time", models.IntegerField(blank=True)),
                ("latest_time", models.IntegerField(blank=True)),
                ("latest_time_desc", models.IntegerField(blank=True, default=0)),
                ("level_id_desc", models.SmallIntegerField(blank=True, default=0)),
                ("client_ip", models.CharField(blank=True, max_length=255)),
                ("param_name", models.CharField(blank=True, max_length=255, null=True)),
                ("is_del", models.SmallIntegerField(blank=True, default=0)),
                ("method_pool_id", models.IntegerField(blank=True, default=-1)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastagent"
                    ),
                ),
                (
                    "hook_type",
                    models.ForeignKey(
                        db_column="hook_type_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.hooktype",
                    ),
                ),
                (
                    "level",
                    models.ForeignKey(
                        blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastvullevel"
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastproject",
                    ),
                ),
                (
                    "project_version",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastprojectversion",
                    ),
                ),
                (
                    "server",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastserver",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        db_column="status_id",
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastvulnerabilitystatus",
                    ),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        db_column="strategy_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iaststrategymodel",
                    ),
                ),
            ],
            options={
                "db_table": "iast_vulnerability",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastVulLog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("msg_type", models.IntegerField()),
                ("msg", models.TextField()),
                ("meta_data", models.JSONField()),
                ("datetime", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                (
                    "asset_vul",
                    models.ForeignKey(
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastassetvul",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        db_constraint=False, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "vul",
                    models.ForeignKey(
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastvulnerabilitymodel",
                    ),
                ),
            ],
            options={
                "db_table": "iast_vul_log",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastvulDtMarkRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("dt_mark", models.CharField(blank=True, max_length=255)),
                (
                    "iastvul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastvulnerabilitymodel",
                    ),
                ),
            ],
            options={
                "db_table": "iast_iast_dtmatk_relation",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastVulAssetRelationV2",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "asset",
                    models.ForeignKey(
                        db_column="asset",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.assetv2global",
                        to_field="aql",
                    ),
                ),
                (
                    "asset_vul",
                    models.ForeignKey(
                        db_column="vul_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastassetvulv2",
                        to_field="vul_id",
                    ),
                ),
            ],
            options={
                "db_table": "iast_asset_vul_v2_relation",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastVulAssetRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("is_del", models.SmallIntegerField(default=0)),
                ("create_time", models.IntegerField()),
                (
                    "asset",
                    models.ForeignKey(
                        db_column="asset_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.asset",
                    ),
                ),
                (
                    "asset_vul",
                    models.ForeignKey(
                        db_column="asset_vul_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastassetvul",
                    ),
                ),
                (
                    "status",
                    models.ForeignKey(
                        db_column="status_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastvulnerabilitystatus",
                    ),
                ),
                (
                    "vul_asset_metadata",
                    models.ForeignKey(
                        default="",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastassetvulrelationmetadata",
                    ),
                ),
            ],
            options={
                "db_table": "iast_asset_vul_relation",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastThirdPartyService",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("address", models.CharField(blank=True, max_length=255, null=True)),
                ("service_type", models.CharField(blank=True, max_length=255, null=True)),
                ("port", models.CharField(blank=True, max_length=255, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        db_column="agent_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastagent",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastproject",
                    ),
                ),
            ],
            options={
                "db_table": "iast_third_party_service",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastStrategyUser",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("name", models.CharField(blank=True, max_length=200)),
                ("content", models.TextField(blank=True)),
                ("status", models.IntegerField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="创建时间")),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.department",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_strategy_user",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iaststrategymodel",
            name="level",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastvullevel"),
        ),
        migrations.AddField(
            model_name="iaststrategymodel",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name="IastSensitiveInfoRule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("pattern", models.CharField(default=None, max_length=255)),
                ("status", models.IntegerField(default=None)),
                ("latest_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                (
                    "pattern_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastpatterntype"
                    ),
                ),
                (
                    "strategy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iaststrategymodel"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_sensitive_info_rule",
            },
        ),
        migrations.CreateModel(
            name="IastReplayQueue",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("relation_id", models.IntegerField(blank=True, null=True)),
                ("state", models.IntegerField(blank=True, null=True)),
                ("count", models.IntegerField(blank=True, null=True)),
                ("result", models.IntegerField(blank=True, null=True)),
                ("create_time", models.IntegerField(blank=True, null=True)),
                ("update_time", models.IntegerField(blank=True, null=True)),
                ("verify_time", models.IntegerField(blank=True, null=True)),
                ("uri", models.CharField(blank=True, max_length=2000, null=True)),
                ("method", models.CharField(blank=True, max_length=10, null=True)),
                ("scheme", models.CharField(blank=True, max_length=10, null=True)),
                ("header", models.CharField(blank=True, max_length=4000, null=True)),
                ("params", models.CharField(blank=True, max_length=2000, null=True)),
                ("body", models.CharField(blank=True, max_length=4000, null=True)),
                ("replay_type", models.IntegerField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
                (
                    "payload",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastvulrecheckpayload",
                    ),
                ),
            ],
            options={
                "db_table": "iast_replay_queue",
                "ordering": ("-replay_type",),
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastRecognizeRule",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("rule_detail", models.CharField(blank=True, max_length=255)),
                ("rule_type", models.IntegerField(choices=[(1, "Black"), (2, "White")])),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("updated", models.DateTimeField(auto_now=True)),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastproject",
                    ),
                ),
            ],
            options={
                "db_table": "iast_recoginze_rule",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastProjectTemplate",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("template_name", models.CharField(max_length=255)),
                ("latest_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                (
                    "vul_validation",
                    models.IntegerField(
                        choices=[(None, 0), (0, "Follow Global"), (1, "Enable"), (2, "Disable")], default=0
                    ),
                ),
                ("is_system", models.IntegerField(default=0)),
                ("data_gather", models.JSONField(default=dict)),
                ("data_gather_is_followglobal", models.IntegerField(default=1)),
                ("blacklist_is_followglobal", models.IntegerField(default=1)),
                (
                    "scan",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iaststrategyuser"
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_project_template",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iastproject",
            name="scan",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iaststrategyuser",
            ),
        ),
        migrations.AddField(
            model_name="iastproject",
            name="template",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastprojecttemplate"
            ),
        ),
        migrations.AddField(
            model_name="iastproject",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name="IastMessage",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("message", models.CharField(blank=True, max_length=512)),
                ("relative_url", models.CharField(blank=True, max_length=512)),
                ("create_time", models.IntegerField(default=dongtai_common.utils.db.get_timestamp)),
                ("read_time", models.IntegerField(default=0)),
                ("is_read", models.IntegerField(default=0)),
                ("to_user_id", models.IntegerField(default=0)),
                (
                    "message_type",
                    models.ForeignKey(
                        db_column="message_type_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastmessagetype",
                    ),
                ),
            ],
            options={
                "db_table": "iast_message",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastLog",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                (
                    "action_time",
                    models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name="action time"),
                ),
                ("url", models.CharField(max_length=255)),
                ("raw_url", models.CharField(max_length=255)),
                ("module_name", models.CharField(max_length=255)),
                ("function_name", models.CharField(max_length=255)),
                ("operate_type", models.IntegerField(choices=[(1, "GET"), (2, "ADD"), (3, "CHANGE"), (4, "DELETE")])),
                ("access_ip", models.CharField(blank=True, max_length=255)),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_log",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastHeartbeat",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("memory", models.CharField(blank=True, max_length=1000, null=True)),
                ("cpu", models.CharField(blank=True, max_length=1000, null=True)),
                ("disk", models.CharField(blank=True, max_length=1000, null=True)),
                ("req_count", models.IntegerField(blank=True, default=0, null=True)),
                ("dt", models.IntegerField()),
                ("report_queue", models.PositiveIntegerField(default=0)),
                ("method_queue", models.PositiveIntegerField(default=0)),
                ("replay_queue", models.PositiveIntegerField(default=0)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="heartbeats",
                        related_query_name="heartbeat",
                        to="dongtai_common.iastagent",
                        verbose_name="agent",
                    ),
                ),
            ],
            options={
                "db_table": "iast_heartbeat",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastHeaderVulnerabilityDetail",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("req_header", models.TextField()),
                ("res_header", models.TextField(blank=True)),
                (
                    "agent",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
                (
                    "header_vul",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastheadervulnerability",
                    ),
                ),
                (
                    "method_pool",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.methodpool",
                    ),
                ),
            ],
            options={
                "db_table": "iast_header_vulnerability_detail",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iastheadervulnerability",
            name="project",
            field=models.ForeignKey(
                db_constraint=False,
                default=-1,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iastproject",
            ),
        ),
        migrations.AddField(
            model_name="iastheadervulnerability",
            name="project_version",
            field=models.ForeignKey(
                db_constraint=False,
                default=-1,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iastprojectversion",
            ),
        ),
        migrations.AddField(
            model_name="iastheadervulnerability",
            name="vul",
            field=models.ForeignKey(
                db_constraint=False,
                default=-1,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iastvulnerabilitymodel",
            ),
        ),
        migrations.CreateModel(
            name="IastErrorlog",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("errorlog", models.TextField(blank=True, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("dt", models.IntegerField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
            ],
            options={
                "db_table": "iast_errorlog",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastDastIntegrationRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("dt_mark", models.CharField(blank=True, max_length=255)),
                (
                    "dastvul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastdastintegration",
                    ),
                ),
                (
                    "iastvul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastvulnerabilitymodel",
                    ),
                ),
            ],
            options={
                "db_table": "iast_dast_integration_relation",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iastdastintegration",
            name="project",
            field=models.ForeignKey(
                blank=True, default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastproject"
            ),
        ),
        migrations.AddField(
            model_name="iastdastintegration",
            name="project_version",
            field=models.ForeignKey(
                blank=True,
                default=-1,
                on_delete=django.db.models.deletion.CASCADE,
                to="dongtai_common.iastprojectversion",
            ),
        ),
        migrations.AddField(
            model_name="iastdastintegration",
            name="vul_level",
            field=models.ForeignKey(
                blank=True, on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastvullevel"
            ),
        ),
        migrations.CreateModel(
            name="IastCircuitTarget",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("target_type", models.IntegerField()),
                ("opt", models.IntegerField()),
                ("value", models.CharField(blank=True, max_length=200)),
                (
                    "circuit_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastcircuitconfig"
                    ),
                ),
            ],
            options={
                "db_table": "iast_circuit_targets",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastCircuitMetric",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("metric_type", models.IntegerField()),
                ("opt", models.IntegerField()),
                ("value", models.CharField(blank=True, max_length=200)),
                (
                    "circuit_config",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastcircuitconfig"
                    ),
                ),
            ],
            options={
                "db_table": "iast_circuit_metrics",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAssetVulTypeRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "asset_vul",
                    models.ForeignKey(
                        db_column="asset_vul_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastassetvul",
                    ),
                ),
                (
                    "asset_vul_type",
                    models.ForeignKey(
                        db_column="asset_vul_type_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastassetvultype",
                    ),
                ),
            ],
            options={
                "db_table": "iast_asset_vul_type_relation",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iastassetvul",
            name="asset",
            field=models.ManyToManyField(to="dongtai_common.IastVulAssetRelation"),
        ),
        migrations.AddField(
            model_name="iastassetvul",
            name="level",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastvullevel"),
        ),
        migrations.CreateModel(
            name="IastAssetLicense",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("license_id", models.IntegerField()),
                (
                    "asset",
                    models.ForeignKey(
                        db_column="asset",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.assetv2global",
                        to_field="aql",
                    ),
                ),
            ],
            options={
                "db_table": "iast_asset_v2_license",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastApiRoute",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.CharField(blank=True, max_length=255)),
                ("code_class", models.CharField(blank=True, db_column="code_class", max_length=255)),
                ("description", models.CharField(blank=True, max_length=500)),
                ("code_file", models.CharField(blank=True, db_column="code_file", max_length=500)),
                ("controller", models.CharField(blank=True, max_length=100)),
                ("from_where", models.IntegerField(choices=[(1, "From Agent"), (2, "From Method Pool")], default=1)),
                ("is_cover", models.IntegerField(default=0)),
                (
                    "agent",
                    models.ForeignKey(
                        db_column="agent_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
                (
                    "method",
                    models.ForeignKey(
                        db_column="method_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastapimethod",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastproject"
                    ),
                ),
                (
                    "project_version",
                    models.ForeignKey(
                        default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastprojectversion"
                    ),
                ),
            ],
            options={
                "db_table": "iast_api_route",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastApiResponse",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("return_type", models.CharField(blank=True, max_length=100)),
                (
                    "route",
                    models.ForeignKey(
                        db_column="route_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastapiroute",
                    ),
                ),
            ],
            options={
                "db_table": "iast_api_response",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastApiParameter",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=100)),
                ("parameter_type", models.CharField(blank=True, db_column="type", max_length=100)),
                ("annotation", models.CharField(blank=True, max_length=500)),
                (
                    "route",
                    models.ForeignKey(
                        db_column="route_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastapiroute",
                    ),
                ),
            ],
            options={
                "db_table": "iast_api_parameter",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastApiMethodHttpMethodRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "api_method",
                    models.ForeignKey(
                        db_column="api_method_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastapimethod",
                    ),
                ),
                (
                    "http_method",
                    models.ForeignKey(
                        db_column="http_method_id",
                        db_constraint=False,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.httpmethod",
                    ),
                ),
            ],
            options={
                "db_table": "iast_http_method_relation",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iastapimethod",
            name="http_method",
            field=models.ManyToManyField(
                through="dongtai_common.IastApiMethodHttpMethodRelation", to="dongtai_common.HttpMethod"
            ),
        ),
        migrations.CreateModel(
            name="IastAgentProperties",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("hook_type", models.IntegerField(blank=True, null=True)),
                ("dump_class", models.IntegerField(blank=True, null=True)),
                ("create_time", models.IntegerField(blank=True, null=True)),
                ("update_time", models.IntegerField(blank=True, null=True)),
                ("updated_by", models.IntegerField(blank=True, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastagent",
                    ),
                ),
            ],
            options={
                "db_table": "iast_agent_properties",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAgentMethodPoolReplay",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("url", models.CharField(blank=True, max_length=2000)),
                ("uri", models.CharField(blank=True, max_length=2000)),
                ("http_method", models.CharField(blank=True, max_length=10)),
                ("http_scheme", models.CharField(blank=True, max_length=20)),
                ("http_protocol", models.CharField(blank=True, max_length=255)),
                ("req_header", models.CharField(blank=True, max_length=2000)),
                ("req_params", models.CharField(blank=True, max_length=2000, null=True)),
                ("req_data", models.CharField(blank=True, max_length=4000, null=True)),
                ("res_header", models.CharField(blank=True, max_length=1000, null=True)),
                ("res_body", models.CharField(blank=True, max_length=1000, null=True)),
                ("context_path", models.CharField(blank=True, max_length=255, null=True)),
                ("method_pool", models.TextField()),
                ("clent_ip", models.CharField(blank=True, max_length=255)),
                ("create_time", models.IntegerField()),
                ("update_time", models.IntegerField()),
                ("replay_id", models.IntegerField()),
                ("replay_type", models.IntegerField()),
                ("relation_id", models.IntegerField()),
                (
                    "agent",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastagent"),
                ),
            ],
            options={
                "db_table": "iast_agent_method_pool_replay",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAgentEvent",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(blank=True, max_length=255)),
                ("time", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp, null=True)),
                (
                    "agent",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="new_events",
                        to="dongtai_common.iastagent",
                    ),
                ),
            ],
            options={
                "db_table": "iast_agent_event",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAgentConfig",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("details", models.JSONField()),
                ("hostname", models.CharField(blank=True, max_length=255)),
                ("ip", models.CharField(blank=True, max_length=100)),
                ("port", models.IntegerField()),
                ("cluster_name", models.CharField(blank=True, max_length=255)),
                ("cluster_version", models.CharField(blank=True, max_length=100)),
                ("priority", models.IntegerField()),
                ("create_time", models.IntegerField()),
                (
                    "user",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
                ),
            ],
            options={
                "db_table": "iast_agent_config",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="iastagent",
            name="bind_project",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastproject"
            ),
        ),
        migrations.AddField(
            model_name="iastagent",
            name="department",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.department"),
        ),
        migrations.AddField(
            model_name="iastagent",
            name="project_version",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastprojectversion"
            ),
        ),
        migrations.AddField(
            model_name="iastagent",
            name="server",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="agents",
                related_query_name="agent",
                to="dongtai_common.iastserver",
                verbose_name="server",
            ),
        ),
        migrations.AddField(
            model_name="iastagent",
            name="user",
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name="hooktype",
            name="language",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iastprogramlanguage",
            ),
        ),
        migrations.AddField(
            model_name="hooktype",
            name="vul_strategy",
            field=models.ForeignKey(
                blank=True,
                db_column="strategy_id",
                db_constraint=False,
                default=-1,
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iaststrategymodel",
            ),
        ),
        migrations.AddField(
            model_name="hookstrategy",
            name="hooktype",
            field=models.ForeignKey(
                blank=True,
                help_text="The department this user belongs to. A user will get all permissions granted to each of their department.",
                null=True,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="strategies",
                related_query_name="strategy",
                to="dongtai_common.hooktype",
                verbose_name="type",
            ),
        ),
        migrations.AddField(
            model_name="hookstrategy",
            name="language",
            field=models.ForeignKey(
                blank=True,
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iastprogramlanguage",
            ),
        ),
        migrations.AddField(
            model_name="hookstrategy",
            name="strategy",
            field=models.ForeignKey(
                db_column="strategy_id",
                db_constraint=False,
                default=-1,
                on_delete=django.db.models.deletion.DO_NOTHING,
                related_name="strategies",
                related_query_name="strategy",
                to="dongtai_common.iaststrategymodel",
            ),
        ),
        migrations.AddField(
            model_name="department",
            name="talent",
            field=models.ManyToManyField(
                blank=True,
                help_text="The talent this department belongs to. A department will get all permissions granted to each of their talent.",
                related_name="departments",
                related_query_name="talent",
                to="dongtai_common.Talent",
                verbose_name="talent",
            ),
        ),
        migrations.CreateModel(
            name="DastvulDtMarkRelation",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("dt_mark", models.CharField(blank=True, max_length=255)),
                (
                    "dastvul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastdastintegration",
                    ),
                ),
            ],
            options={
                "db_table": "iast_dast_dtmatk_relation",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="assetv2global",
            name="package_fullname",
            field=models.ForeignKey(
                db_column="package_fullname",
                db_constraint=False,
                on_delete=django.db.models.deletion.DO_NOTHING,
                to="dongtai_common.iastpackagegainfo",
                to_field="package_fullname",
            ),
        ),
        migrations.CreateModel(
            name="AssetV2",
            fields=[
                ("id", models.BigAutoField(primary_key=True, serialize=False)),
                ("package_name", models.CharField(blank=True, max_length=255, unique=True)),
                ("package_path", models.CharField(blank=True, max_length=255)),
                ("signature_algorithm", models.CharField(blank=True, max_length=255)),
                ("signature_value", models.CharField(blank=True, max_length=255)),
                ("dt", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                ("version", models.CharField(blank=True, max_length=255)),
                ("language_id", models.IntegerField(blank=True, default=1)),
                (
                    "aql",
                    models.ForeignKey(
                        blank=True,
                        db_column="aql",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.assetv2global",
                        to_field="aql",
                    ),
                ),
                (
                    "department",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.department",
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastproject",
                    ),
                ),
                (
                    "project_version",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastprojectversion",
                    ),
                ),
            ],
            options={
                "db_table": "iast_asset_v2",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="AssetAggr",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("package_name", models.CharField(blank=True, max_length=255)),
                ("signature_value", models.CharField(blank=True, max_length=255)),
                ("version", models.CharField(blank=True, max_length=255)),
                ("safe_version", models.CharField(blank=True, max_length=255)),
                ("last_version", models.CharField(blank=True, max_length=255)),
                ("vul_count", models.IntegerField()),
                ("vul_critical_count", models.IntegerField(default=0)),
                ("vul_high_count", models.IntegerField(default=0)),
                ("vul_medium_count", models.IntegerField(default=0)),
                ("vul_low_count", models.IntegerField(default=0)),
                ("vul_info_count", models.IntegerField(default=0)),
                ("project_count", models.IntegerField(blank=True)),
                ("language", models.CharField(blank=True, max_length=32)),
                ("license", models.CharField(blank=True, max_length=64)),
                ("is_del", models.SmallIntegerField(default=0)),
                (
                    "level",
                    models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastvullevel"),
                ),
            ],
            options={
                "db_table": "iast_asset_aggr",
                "managed": True,
            },
        ),
        migrations.AddField(
            model_name="asset",
            name="agent",
            field=models.ForeignKey(
                default=-1,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="assets",
                related_query_name="asset",
                to="dongtai_common.iastagent",
                verbose_name="agent",
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="department",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.department"
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="level",
            field=models.ForeignKey(
                default=4, on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.iastvullevel"
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="project",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastproject"
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="project_version",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.CASCADE, to="dongtai_common.iastprojectversion"
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="talent",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.DO_NOTHING, to="dongtai_common.talent"
            ),
        ),
        migrations.AddField(
            model_name="asset",
            name="user",
            field=models.ForeignKey(
                default=-1, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="department",
            field=models.ManyToManyField(
                blank=True,
                help_text="The department this user belongs to. A user will get all permissions granted to each of their department.",
                related_name="users",
                related_query_name="user",
                to="dongtai_common.Department",
                verbose_name="department",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="methodpool",
            index=models.Index(fields=["uri_sha1", "http_method", "agent"], name="iast_agent__uri_sha_aac6d7_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="iastvulassetrelation",
            unique_together={("asset_vul_id", "asset_id")},
        ),
        migrations.AlterUniqueTogether(
            name="iastapiroute",
            unique_together={("path", "method")},
        ),
        migrations.AlterUniqueTogether(
            name="iastapiresponse",
            unique_together={("return_type", "route_id")},
        ),
        migrations.AlterUniqueTogether(
            name="iastapiparameter",
            unique_together={("name", "route_id")},
        ),
        migrations.AlterUniqueTogether(
            name="iastapimethodhttpmethodrelation",
            unique_together={("api_method_id", "http_method_id")},
        ),
        migrations.CreateModel(
            name="IastLicense",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("key", models.CharField(max_length=100)),
                ("value", models.CharField(blank=True, max_length=1000, null=True)),
            ],
            options={
                "db_table": "iast_license",
            },
        ),
        migrations.CreateModel(
            name="IastVulInegration",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("jira_url", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("jira_id", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("jira_state", models.CharField(blank=True, default="", max_length=20, null=True)),
                ("gitlab_url", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("gitlab_id", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("gitlab_state", models.CharField(blank=True, default="", max_length=20, null=True)),
                ("zendao_url", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("zendao_id", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("zendao_state", models.CharField(blank=True, default="", max_length=20, null=True)),
                (
                    "asset_vul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastassetvul",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastvulnerabilitymodel",
                    ),
                ),
            ],
            options={
                "db_table": "iast_vul_integration",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastShareToken",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "token",
                    shortuuid.django_fields.ShortUUIDField(
                        alphabet="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
                        length=22,
                        max_length=22,
                        prefix="",
                    ),
                ),
                ("title", models.CharField(blank=True, max_length=255)),
                (
                    "expire_at",
                    models.DateTimeField(
                        blank=True, help_text="When this time is null, it means indefinitely", null=True
                    ),
                ),
                ("create_at", models.DateTimeField(auto_now_add=True)),
                ("update_at", models.DateTimeField(auto_now=True)),
                (
                    "token_type",
                    models.IntegerField(choices=[(1, "Sca"), (2, "Vul")], default=2, help_text=" Sca: 1  Vul: 2 "),
                ),
                (
                    "status",
                    models.IntegerField(
                        choices=[(1, "ENABLE"), (2, "EXPIRE"), (0, "DISABLE")],
                        default=1,
                        help_text=" ENABLE: 1  EXPIRE: 2  DISABLE: 0 ",
                    ),
                ),
                ("target_url", models.CharField(max_length=255)),
                (
                    "create_user",
                    models.ForeignKey(
                        blank=True, default=-1, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastproject",
                    ),
                ),
                (
                    "project_version",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastprojectversion",
                    ),
                ),
                (
                    "sca",
                    models.ForeignKey(
                        blank=True,
                        default="",
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.assetv2global",
                        to_field="aql",
                    ),
                ),
                (
                    "vul",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastvulnerabilitymodel",
                    ),
                ),
            ],
            options={
                "db_table": "iast_share_token",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastApiRouteV2",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("path", models.CharField(blank=True, max_length=255)),
                ("method", models.CharField(blank=True, max_length=100)),
                ("from_where", models.IntegerField(choices=[(1, "From Agent")], default=1)),
                ("is_cover", models.IntegerField(default=0)),
                ("api_info", models.JSONField(blank=True, default=dict, null=True)),
                ("create_at", models.DateTimeField(auto_now_add=True, null=True)),
                ("update_at", models.DateTimeField(auto_now=True, null=True)),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastproject",
                    ),
                ),
                (
                    "project_version",
                    models.ForeignKey(
                        blank=True,
                        default=-1,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="dongtai_common.iastprojectversion",
                    ),
                ),
            ],
            options={
                "db_table": "iast_api_route_v2",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAgentRequestChainsVulContext",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("vul_id", models.IntegerField(blank=True, default=0)),
                ("method_pool_id", models.IntegerField(blank=True, default=0)),
                ("level_id", models.IntegerField(blank=True, default=0)),
                ("request_hash", models.CharField(blank=True, max_length=255, null=True)),
                ("stack", models.TextField(blank=True, null=True)),
                ("project_path", models.CharField(blank=True, default="", max_length=255, null=True)),
                ("parent_project_id", models.IntegerField(blank=True, default=-1)),
                ("url", models.CharField(blank=True, max_length=255, null=True)),
                ("request", models.TextField(blank=True, null=True)),
                ("response", models.TextField(blank=True, null=True)),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastproject",
                    ),
                ),
            ],
            options={
                "db_table": "iast_request_chains_vul_context",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="IastAgentRequestChains",
            fields=[
                ("id", models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("request_hash", models.CharField(blank=True, max_length=255, null=True)),
                ("span_id", models.CharField(blank=True, max_length=255, null=True)),
                ("parent_span_id", models.CharField(blank=True, max_length=255, null=True)),
                ("protocol", models.CharField(blank=True, max_length=255, null=True)),
                ("level_id", models.IntegerField(blank=True, default=0)),
                ("dt", models.IntegerField(blank=True, default=dongtai_common.utils.db.get_timestamp)),
                (
                    "project",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        to="dongtai_common.iastproject",
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="source",
                        to="dongtai_common.methodpool",
                    ),
                ),
                (
                    "source_agent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="source_agent",
                        to="dongtai_common.iastagent",
                    ),
                ),
                (
                    "target",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="target",
                        to="dongtai_common.methodpool",
                    ),
                ),
                (
                    "target_agent",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        default=-1,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="target_agent",
                        to="dongtai_common.iastagent",
                    ),
                ),
            ],
            options={
                "db_table": "iast_request_chains",
                "managed": True,
            },
        ),
    ]
