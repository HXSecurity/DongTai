#!/bin/bash
# set -e
set -o pipefail
#echo "hello"
_filename=$0

SKIP_MYSQL=false
SKIP_REDIS=false
CHANGE_THIS_VERSION=""
DOCKER_COMPOSE_FILE=""
UPGRADE_DIR=~/dongtai_iast_upgrade
DESTORY_DATA=false

Info() {
  echo -e "[Info] $1"
}

Error() {
  echo -e "\033[31m[Error] $1 \033[0m"
}

Todo() {
  echo -e "\033[36m[Todo] $1 \033[0m"
}

Notice() {
  echo -e "\033[33m[Important] $1 \033[0m"
}

Usage() {
  echo -e "\033[33m[Usage] $1 \033[0m"
}

# Display usage message function
usage() {
  Info "Usage:"
  Usage "\t$_filename -h                                          Display usage message"
  Usage "\t$_filename install -s mysql,redis  -v 1.0.5            Install iast server"
  Usage "\t$_filename remove|rm [-d]                              Uninstall iast server"
  Usage "\t$_filename upgrade -t 1.1.2                            Upgrade iast server"
  Usage "\t$_filename version                                     Get image version"
  Usage "\t$_filename dbhash                                      Get database schema hash"
  Usage "\t$_filename dbschema                                    Export database schema"
  Usage "\t$_filename dbrestore -f FILEPATH                       Restore mysql database"
  Usage "\t$_filename dbbackup  -d FILEPATH                       Backup mysql database"
  Usage "\t$_filename file                                        Export docker-compose.yml "
  Usage "\t$_filename logs webapi|openapi|web|mysql|web|engine    Extract tail logs"
}

OUT="$(uname -s)"
case "${OUT}" in
Linux*) machine=Linux ;;
Darwin*) machine=Mac ;;
CYGWIN*) machine=Cygwin ;;
MINGW*) machine=MinGw ;;
*) machine="UNKNOWN:${OUT}" ;;
esac
CURRENT_PATH=$(
  cd "$(dirname "$0")" || exit
  pwd
)
cd "$CURRENT_PATH" || exit

sha=sha1sum
if [ $machine == "Mac" ]; then
  sha=shasum
fi

trim() {
  local trimmed="$1"
  # Strip leading spaces.
  while [[ $trimmed == ' '* ]]; do
    trimmed="${trimmed## }"
  done
  # Strip trailing spaces.
  while [[ $trimmed == *' ' ]]; do
    trimmed="${trimmed%% }"
  done
  echo "$trimmed"
}

function realpath() {
  [[ $1 == /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

shell_path=$(realpath "$0")
shell_dir=$(dirname "$shell_path")

function current_image_version() {
  ver=$(docker ps | grep "dongtai-webapi:" | awk '{split($2,a,":");print a[2]}')
  echo "$ver"
}

function get_latest_release_version() {
  ver=$(cat updaterecord.txt | awk 'NR==2 {print $1}')
  echo "$ver"
}

function get_web_service_port() {
  WEB_CONTAINER_ID=$(docker ps | grep 'dongtai-web:' | awk '{print $1}')
  WEB_SERVICE_PORT=$(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{(index $conf 0).HostPort}} {{end}}' $WEB_CONTAINER_ID)
  WEB_SERVICE_PORT=$(trim $WEB_SERVICE_PORT)

  echo "$WEB_SERVICE_PORT"

}

# get mysql container id
function get_mysql_container_id() {
  mysql_container_id=""
  mysql_container_id=$(docker ps | grep 'dongtai-mysql:' | awk '{print $1}')
  if [ -z $mysql_container_id ]; then
    exit 1
  fi
  echo "$mysql_container_id"

}

get_database_schema() {
  echo "dongtai-iast" | docker exec -i $(get_mysql_container_id) mysqldump -u root -d dongtai_webapi --ignore-table=dongtai_webapi.mysql_version_control -p --skip-comments --skip-opt | sed 's/ AUTO_INCREMENT=[0-9]*//g' | sed 's/\/\*!*.*//g'
}

function current_hash() {
  retval=$(get_database_schema | $sha | awk '{print $1}')
  echo "$retval"
}

function get_database_data_dir() {
  mysql_id=$(get_mysql_container_id)
  if [ -z $mysql_id ]; then
    Notice "Mysql instance is not running"
    exit
  fi
  dir=$(docker inspect --format='{{range .Mounts}} {{.Source}} {{end}}' $(get_mysql_container_id))
  echo "$dir"
}

now=$(date '+%Y-%m-%d-%H-%M-%S')
function backup_mysql() {
  backup_dir=$UPGRADE_DIR
  if [ ! -z $1 ]; then
    backup_dir=$1
  fi
  backup_filename=$backup_dir/dongtai_iast-$now.sql
  mkdir -p $backup_dir
  Notice "Start to backup exist data,his will take a few minutes, donâ€™t interrupt."
  docker exec -i $(get_mysql_container_id) /bin/bash -c "mysqldump -uroot -pdongtai-iast --single-transaction -R -E --default-character-set=utf8mb4 --databases 'dongtai_webapi' " >$backup_filename || exit 1
  Info "Finished backup exist data..."
}

function restore_mysql() {
  if [ -z $1 ]; then
    Error "Input data filepath."
    exit 1
  fi
  # before restore,backup current data
  backup_mysql
  Info "Start to restore data, data filepath: $1"
  docker exec -i $(get_mysql_container_id) /bin/bash -c "mysql -uroot -pdongtai-iast --default-character-set=utf8mb4 dongtai_webapi " <$1 || exit 1

  Notice "Database restore finished."

}

# create docker compose file
# Usage: create_docker_compose_file $VERSION $WEB_SERVICE_PORT $MYSQL_DATA_LOCATION
function create_docker_compose_file() {
  if [ ! -z "$1" ]; then
    CHANGE_THIS_VERSION=$1
  fi

  if [ ! -z "$2" ]; then
    WEB_SERVICE_PORT=$2
  fi

  if [ ! -z "$3" ]; then
    DATA_DIR=$3
  else
    DATA_DIR=$PWD
  fi

  MYSQL_STR=""
  REDIS_STR=""
  if [ $SKIP_MYSQL == false ]; then
    export MYSQL_STR=$(
      cat <<EOF
dongtai-mysql: 
    image: dongtai.docker.scarf.sh/dongtai/dongtai-mysql:$CHANGE_THIS_VERSION
    restart: always
    volumes:
      - "$DATA_DIR:/var/lib/mysql:rw"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
EOF
    )
  fi

  if [ $SKIP_REDIS == false ]; then
    export REDIS_STR=$(
      cat <<EOF
dongtai-redis:
    image: dongtai.docker.scarf.sh/dongtai/dongtai-redis:$CHANGE_THIS_VERSION
    restart: always
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

EOF
    )
  fi

  read -r -d '' DOCKER_COMPOSE_FILE <<EOM
version: "2"
services:
  $MYSQL_STR
  $REDIS_STR
  dongtai-webapi:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-webapi:$CHANGE_THIS_VERSION"
    restart: always
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/webapi/conf/config.ini"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  dongtai-web:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-web:$CHANGE_THIS_VERSION"
    restart: always
    ports:
      - "$WEB_SERVICE_PORT:80"
    volumes:
      - "$PWD/nginx.conf:/etc/nginx/nginx.conf"
    depends_on:
      - dongtai-webapi
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  dongtai-openapi:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-openapi:$CHANGE_THIS_VERSION"
    restart: always
    volumes:
       - "$PWD/config-tutorial.ini:/opt/dongtai/openapi/conf/config.ini"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

  dongtai-engine:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-engine:$CHANGE_THIS_VERSION"
    restart: always
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/engine/conf/config.ini"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"


  dongtai-engine-task:
    image: "dongtai.docker.scarf.sh/dongtai/dongtai-engine:$CHANGE_THIS_VERSION"
    restart: always
    command: ["/opt/dongtai/engine/docker/entrypoint.sh", "task"]
    volumes:
      - "$PWD/config-tutorial.ini:/opt/dongtai/engine/conf/config.ini"
    depends_on:
      - dongtai-engine
    logging:
      driver: "json-file"
      options:
        max-size: "10m"

EOM

  echo "$DOCKER_COMPOSE_FILE"

}

if [ ! 0 == $# ]; then # If options provided then
  while getopts ":h" opt; do # Go through the options
    case $opt in
    h) # Help
      usage
      exit 0 # Exit correctly
      ;;
    ?) # Invalid option
      echo "[ERROR]: Invalid option: -${OPTARG}"
      usage
      exit 1 # Exit with erro
      ;;
    esac
  done
  shift $((OPTIND - 1))
  subcommand=$1
  shift # Get subcommand and shift to next option
  case "$subcommand" in
  "debug")
    result=$(get_database_data_dir)
    echo ""
    echo "result:$result"
    ;;
  "version")
    cur_ver=$(current_image_version)
    echo ""
    Notice "current image version: $cur_ver"
    ;;
  "dbhash")
    cur_hash=$(current_hash)
    Notice "current db hash: $cur_hash"
    ;;
  "dbschema")
    outout_filename="export_db_schema.txt"
    output_location="$shell_dir/$outout_filename"
    if [ ! 0 == $# ]; then # if options provided
      while getopts ":o:h" opt; do
        case "$opt" in
        "o")
          output_location=$OPTARG
          echo "$output_location"
          ;;
        "h")
          Usage "\t$_filename dbschema -o output_location                Export database schema"
          exit 1
          ;;
        ?) # Invalid option
          Error "Invalid option: -${OPTARG}"
          usage
          exit 1 # Exit with erro
          ;;
        esac
      done
    fi
    Info "Start export database schema to: $output_location"
    get_database_schema >$output_location || exit 1
    echo ""
    Notice "Exported database schema to: $output_location"
    ;;

  "dbbackup")
    if [ ! 0 == $# ]; then # if options provided
      while getopts ":d:h" opt; do
        case "$opt" in
        "d")
          data_location=$OPTARG
          ;;
        "h")
          Usage "\t$_filename dbbackup -d FILEPATH                         Backup mysql database"
          exit 1
          ;;
        ?) # Invalid option
          Error "Invalid option: -${OPTARG}"
          usage
          exit 1 # Exit with erro
          ;;
        esac
      done
    fi
    if [ -z "$data_location" ]; then
      backup_mysql
    else
      backup_mysql $data_location
    fi

    ;;

  "dbrestore")
    if [ ! 0 == $# ]; then # if options provided
      while getopts ":f:h" opt; do
        case "$opt" in
        "f")
          data_location=$OPTARG
          ;;
        "h")
          Usage "\t$_filename restore -f FILEPATH                         Restore mysql database"
          exit 1
          ;;
        ?) # Invalid option
          Error "Invalid option: -${OPTARG}"
          usage
          exit 1 # Exit with erro
          ;;
        esac
      done
    fi
    if [ -z "$data_location" ]; then
      Error "Data filepath required."
      exit 1
    else
      restore_mysql $data_location
    fi

    ;;

  "file")
    compose_file=$(create_docker_compose_file $(current_image_version) $(get_web_service_port) $(get_database_data_dir))
    file_path="$shell_dir/docker-compose.yml"
    echo "$compose_file" >$file_path | exit 1
    Info "File location:$file_path"
    ;;

  "logs")
    shift $((OPTIND - 1))
    op=$1
    shift
    docker logs -f --tail=100 $(docker ps | grep "dongtai-$op:" | awk '{print $1}') || exit 1
    ;;
  "install") # install iast server
    #unset OPTIND
    # Check if the Docker service is turned on
    check_docker() {
      Info "check docker servie status."
      docker ps 1>/dev/null 2>/dev/null

      if [ $? -ne 0 ]; then
        Error "docker service is down. please start docker service and rerun."
        exit
      else
        Info "docker service is up."
      fi
    }

    check_docker_compose() {
      if ! [ -x "$(command -v docker-compose)" ]; then
        Error 'docker-compose not installed.'
        exit 1
      fi
    }

    # Info "mysql persistence"
    # mkdir data
    start_docker_compose() {
      Info "Starting docker compose ..."

      if [ ! -z "$1" ]; then
        docker_compose_file=$(create_docker_compose_file $CHANGE_THIS_VERSION $WEB_SERVICE_PORT $1)
      else
        docker_compose_file=$(create_docker_compose_file $CHANGE_THIS_VERSION $WEB_SERVICE_PORT)
      fi

      if [ "$docker_compose_file" = "" ]; then
        Error "Create docker-compose.yaml error"
        exit 1
      fi

      docker-compose -p dongtai-iast -f <(echo "$docker_compose_file") up -d
    }

    # Specify the port of Web, OpenAPI service and check whether it is available
    check_port() {
      Info "check port status"

      is_port_inuse=false

      read -p "[+] please input web service port, default [80]:" WEB_SERVICE_PORT
      if [ -z "$WEB_SERVICE_PORT" ]; then
        WEB_SERVICE_PORT=80
      fi

      if ! [ -x "$(command -v lsof)" ]; then
        netstat -tunlp | grep $WEB_SERVICE_PORT | grep "LISTEN" 2>/dev/null
        if [ ! $? -ne 0 ]; then
          is_port_inuse=true
        fi
      else
        lsof -i:$WEB_SERVICE_PORT | grep "LISTEN" 2>/dev/null
        if [ ! $? -ne 0 ]; then
          is_port_inuse=true
        fi
      fi

      if [ $is_port_inuse == true ]; then
        Error "port $WEB_SERVICE_PORT is already in use. please change default port."
        exit
      else
        Info "port $WEB_SERVICE_PORT is ok."
      fi

    }

    DATA_DIR="$shell_dir/data"
    if [ ! 0 == $# ]; then # if options provided
      while getopts ":d:m:s:v:h:" optname; do
        case "$optname" in
        "d")
          DATA_DIR=$OPTARG
          ;;
        "s")
          SKIP=$OPTARG
          array=(${SKIP//,/ })
          for var in "${array[@]}"; do
            if [ "$var" == "mysql" ]; then
              SKIP_MYSQL=true
            elif [ "$var" == "redis" ]; then
              SKIP_REDIS=true
            fi
          done
          ;;
        "v")
          CHANGE_THIS_VERSION=$OPTARG
          ;;
        "h")
          usage
          exit 1
          ;;
        ":")
          Error "option -${OPTARG} requires an argument"
          usage
          exit 1
          ;;
        "?")
          Error "Invalid option: -${OPTARG}"
          usage
          exit 1 # Exit with erro
          ;;
        esac
      done
    fi

    if [ -z "$CHANGE_THIS_VERSION" ] || [ "$CHANGE_THIS_VERSION" == "" ]; then
      CHANGE_THIS_VERSION=$(get_latest_release_version)
    fi

    check_docker
    check_docker_compose
    check_port
    start_docker_compose "$DATA_DIR"

    if [ $? -ne 0 ]; then
      Error "Installation failed,Something wrong!"
      exit
    else
      Notice "Installation success!"
    fi

    ;;
  "remove" | "rm")
    if [ ! 0 == $# ]; then # if options provided
      while getopts ":d:h:" opt; do
        case ${1} in
        "-d")
          DESTORY_DATA=true
          ;;
        "-h")
          Usage "\t$_filename rm [-d]                   Uninstall iast server"
          exit 1
          ;;
        ?) # Invalid option
          Error "Invalid option: -${OPTARG}"
          usage
          exit 1 # Exit with erro
          ;;
        esac
      done
    fi

    docker_compose_file=$(create_docker_compose_file $(current_image_version) $(get_web_service_port))

    if [ "$DESTORY_DATA" == true ]; then
      data_dir=$(get_database_data_dir)
      Notice "Data dir:[$data_dir] will be deleted."
      docker-compose -p dongtai-iast -f <(echo "$docker_compose_file") down -v
      rm -rf $data_dir
    else
      docker-compose -p dongtai-iast -f <(echo "$docker_compose_file") down
    fi
    ;;

  "upgrade")

    TO_VERSION=""
    FROM_VERSION=""
    SHA_FILE=updaterecord.txt
    # MYSQL_CONTAINER_ID=$(docker ps | grep 'dongtai-mysql:' | awk '{print $1}')
    WEB_CONTAINER_ID=$(docker ps | grep 'dongtai-web:' | awk '{print $1}')

    function check_update_record_file() {
      if [ ! -f "$SHA_FILE" ]; then
        Error "$SHA_FILE does not exists!"
        exit
      fi
    }

    function check_schema_hash() {
      Info "Check database schema ..."

      # set -x
      # cat updaterecord.txt | awk "{ if($1==$FROM_VERSION) print $4}"

      FROM_DB_HASH=$(cat updaterecord.txt | awk -v FROM_VERSION=$FROM_VERSION '{ if($1==FROM_VERSION) print $4}')
      CURRENT_DATABASE_HASH=$(current_hash)

      Info "FROM_DB_HASH:$FROM_DB_HASH"
      Info "CURRENT_DATABASE_HASH:$CURRENT_DATABASE_HASH"

      if [ ! $CURRENT_DATABASE_HASH == $FROM_DB_HASH ]; then
        Error "Your current database hash value  not equals to the verison $FROM_VERSION, please check."
        exit
      fi

      Info "Database schema correct ..."
    }

    function execute_update() {
      # extract sql name and reverse list
      SQL_NAMES=$(cat updaterecord.txt | awk "/$TO_VERSION/,/$FROM_VERSION/ {print \$2}" | grep -vF "$FROM_VERSION" | awk "{array[NR]=\$0} END { for(i=NR;i>0;i--) {print array[i];} }")

      mysql_container_id=$(get_mysql_container_id)
      # check whether mysql is ready
      while :; do
        Info "start to check mysql status ..."
        tables=$(docker exec -i $mysql_container_id /bin/bash -c "mysql -uroot -p'dongtai-iast'  --execute \"SHOW DATABASES;\"")
        if [[ ${tables["mysql"]} ]]; then
          Notice "mysql instance ready!"
          break
        fi
        sleep 2
      done

      # sql downloaded,start to execute sql
      for SQL in $SQL_NAMES; do
        Info "Start to load sql:[$SQL]"
        docker exec -i $mysql_container_id /bin/bash -c "mysql -uroot -p'dongtai-iast' dongtai_webapi < /docker-entrypoint-initdb.d/$SQL"
      done

    }

    function check_after_execute() {
      Info "Check result..."
      TO_DB_HASH=$(cat updaterecord.txt | awk -v TO_VERSION=$TO_VERSION '{ if($1==TO_VERSION) print $4}')
      CURRENT_DATABASE_HASH=$(current_hash)

      Info "TO_DB_HASH:$TO_DB_HASH"
      Info "CURRENT_DATABASE_HASH:$CURRENT_DATABASE_HASH"

      if [ ! $CURRENT_DATABASE_HASH == $TO_DB_HASH ]; then
        Error "Your current database hash value  not equals to the verison $TO_DB_HASH, please check."
        exit
      fi

      Info "Current database schema correct ..."
      Info "Upgrade Success ..."
    }

    function upgrade_docker_image() {
      WEB_PORT=$(docker inspect --format='{{range $p, $conf := .NetworkSettings.Ports}} {{(index $conf 0).HostPort}} {{end}}' $WEB_CONTAINER_ID)
      WEB_PORT=$(trim $WEB_PORT)

      # åˆ›å»º DOCKER_COMPOSE_FILE
      docker_compose_file=$(create_docker_compose_file $TO_VERSION $(get_web_service_port) $(get_database_data_dir))

      Info "Start to pull new images with tag $TO_VERSION"
      docker-compose -p dongtai-iast -f <(echo "$docker_compose_file") pull

      Info "Start new containers with tag $TO_VERSION "
      docker-compose -p dongtai-iast -f <(echo "$docker_compose_file") up -d

    }

    function summary() {
      Notice "-----Upgrade summary start-----"
      Info "Ugrade from $FROM_VERSION to $TO_VERSION. \n"
      Info "Backup file : $backup_filename"
      Info "Executed sql as follow: "
      for SQL in $SQL_NAMES; do
        Info $SQL
      done
      Info "Ugrade workdir is $UPGRADE_DIR, this can be delete after upgraded. "
      Notice "-----Upgrade summary end-----"
    }

    if [ ! 0 == $# ]; then # if options provided
      while getopts ":t:h" optname; do
        case "$optname" in
        "t")
          TO_VERSION=$OPTARG
          ;;
        "h")
          Usage "\t$_filename upgrade -f 1.0.5 -t 1.1.2   Upgrade iast server"
          exit 1
          ;;
        ":") ;;

        "?")
          Error "Unknown option $OPTARG"
          ;;
        esac
      done
    fi

    FROM_VERSION=$(current_image_version)
    if [ -z "$TO_VERSION" ]; then
      TO_VERSION=$(get_latest_release_version)
    fi

    echo "FROM_VERSION:$FROM_VERSION,TO_VERSION:$TO_VERSION"

    backup_mysql
    check_update_record_file
    check_schema_hash
    upgrade_docker_image
    execute_update
    check_after_execute
    summary

    ;;
  *) # Invalid subcommand
    if [ ! -z $subcommand ]; then # Don't show if no subcommand provided
      echo "Invalid subcommand: $subcommand"
    fi
    usage
    exit 1 # Exit with error
    ;;
  esac
else # else if no options provided throw error
  usage
  exit 1
fi
